names()
system.file("extdata", "usage_detail_30225811_201811", package = "bbanalyze") %>%
parse_detail() %>%
names()
system.file("extdata", "usage_detail_30225811_201811", package = "bbanalyze") %>%
parse_detail()
this_usage = system.file("extdata", "usage_detail_30225811_201811", package = "bbanalyze") %>% parse_detail()
View(this_usage)
this_usage %<>% mutate(CTRB_BAC = BO_OPTIMIZED * CTRB_BILLING)
View(this_usage)
devtools::load_all(".")
this_usage = system.file("extdata", "usage_detail_30225811_201811", package = "bbanalyze") %>% parse_detail()
this_usage %>% has_names("CTRB_BAC")
this_usage %>% has_name("CTRB_BAC")
this_usage %>% tidyverse::has_name("CTRB_BAC")
this_usage %>% tibble::has_name("CTRB_BAC")
!(this_usage %>% tibble::has_name("CTRB_BAC"))
!this_usage %>% tibble::has_name("CTRB_BAC")
devtools::load_all(".")
this_usage = system.file("extdata", "usage_detail_30225811_201811", package = "bbanalyze") %>% parse_detail()
expect(
all(
system.file("extdata", "scheduled_securities_30358785_201811", package = "bbanalyze") %>%
parse_detail() %>%
names() %in%
system.file("extdata", "usage_detail_30225811_201811", package = "bbanalyze") %>%
parse_detail() %>%
names()
),
failure_message = "column names not matching expected"
)
system.file("extdata", "usage_detail_30225811_201811", package = "bbanalyze") %>%
parse_detail() %>%
names()
system.file("extdata", "scheduled_securities_30358785_201811", package = "bbanalyze") %>%
parse_detail() %>%
names()
(system.file("extdata", "scheduled_securities_30358785_201811", package = "bbanalyze") %>%
parse_detail() %>%
names()) %in%
(system.file("extdata", "usage_detail_30225811_201811", package = "bbanalyze") %>%
parse_detail() %>%
names())
(
system.file("extdata", "scheduled_securities_30358785_201811", package = "bbanalyze") %>%
parse_detail() %>%
names()
) %in% system.file("extdata", "usage_detail_30225811_201811", package = "bbanalyze") %>%
parse_detail() %>%
names()
(
system.file("extdata", "scheduled_securities_30358785_201811", package = "bbanalyze") %>%
parse_detail() %>%
names()
) %in%
(
system.file("extdata", "usage_detail_30225811_201811", package = "bbanalyze") %>%
parse_detail() %>%
names()
)
expect(
all(
(
system.file("extdata", "scheduled_securities_30358785_201811", package = "bbanalyze") %>%
parse_detail() %>%
names()
) %in%
(
system.file("extdata", "usage_detail_30225811_201811", package = "bbanalyze") %>%
parse_detail() %>%
names()
)
),
failure_message = "column names not matching expected"
)
system.file("extdata", "scheduled_securities_30358785_201811", package = "bbanalyze") %>%
parse_detail() %>%
nrow()
expect_equal(
system.file("extdata", "scheduled_securities_30358785_201811", package = "bbanalyze") %>%
parse_detail() %>%
nrow(),
11801,
failure_message = "number of rows not as expected"
)
test_that("sample scheduled_securities file reads and parses correctly", {
expect(
all(system.file("extdata", "scheduled_securities_30358785_201811", package = "bbanalyze") %>%
parse_detail() %>%
names() %in%
c(
"OUTPUT_ID",
"SECURITY",
"ID_BB_UNIQUE",
"QUALIFIER",
"PROCESSED_TIME",
"DOWNLOAD_PRODUCT",
"BILLABLE_PRODUCT",
"SERVICE",
"CTRB_BILLING",
"CTRB_UNIQ",
"CTRB_AC",
"CTRB_MAIN",
"INIT_CHARGE",
"CTRB_PD",
"CAPS",
"BO_OPTIMIZED",
"tz",
"PRODUCT_TYPE",
"CTRB_BAC"
)),
failure_message = "column names not matching expected"
)
expect(
all(
(
system.file("extdata", "scheduled_securities_30358785_201811", package = "bbanalyze") %>%
parse_detail() %>%
names()
) %in%
(
system.file("extdata", "usage_detail_30225811_201811", package = "bbanalyze") %>%
parse_detail() %>%
names()
)
),
failure_message = "column names not matching expected"
)
expect_equal(
system.file("extdata", "scheduled_securities_30358785_201811", package = "bbanalyze") %>%
parse_detail() %>%
nrow(),
11801,
failure_message = "number of rows not as expected"
)
})
# this_usage = system.file("extdata", "scheduled_securities_30358785_201811", package = "bbanalyze") %>% parse_detail()
# this_usage = system.file("extdata", "usage_detail_30225811_201811", package = "bbanalyze") %>% parse_detail()
rm(list = ls())
devtools::check(document = T)
devtools::check(document = T)
filename <- system.file("extdata", "cashbval_usage_detail_30358785_201811", package = "bbanalyze") %>% parse_detail()
filename <- system.file("extdata", "cashbval_usage_detail_30358785_201811", package = "bbanalyze")
this_usage <- readr::read_delim(
filename,
delim = "|",
na = "N/A",
# col_types = 'ffffcfcfcccccccc', ### sets the col types but commented out because super slow
col_types = readr::cols(.default = "c"),
trim_ws = T
)
devtools::load_all(".")
filename <- system.file("extdata", "cashbval_usage_detail_30358785_201811", package = "bbanalyze")
system.file("extdata", "cashbval_usage_detail_30358785_201811", package = "bbanalyze") %>% parse_detail()
stopifnot(file.exists(filename))
grepl("usage_detail|scheduled_securities", filename)
filename
grepl("//usage_detail|scheduled_securities", filename)
filename <- system.file("extdata", "usage_detail_30225811_201811", package = "bbanalyze")
grepl("//usage_detail|scheduled_securities", filename)
grepl("\/usage_detail|scheduled_securities", filename)
grepl("\\/usage_detail|scheduled_securities", filename)
grepl("usage_detail|scheduled_securities", filename) & !grepl("_usage_detail", filename)
filename <- system.file("extdata", "cashbval_usage_detail_30358785_201811", package = "bbanalyze")
grepl("usage_detail|scheduled_securities", filename) & !grepl("_usage_detail", filename)
devtools::load_all(".")
system.file("extdata", "cashbval_usage_detail_30358785_201811", package = "bbanalyze") %>% parse_detail()
filename <- system.file("extdata", "cashbval_usage_detail_30358785_201811", package = "bbanalyze")
stopifnot(file.exists(filename))
grepl("usage_detail|scheduled_securities", filename) & !grepl("_usage_detail", filename)
devtools::load_all(".")
system.file("extdata", "cashbval_usage_detail_30358785_201811", package = "bbanalyze") %>% parse_detail()
test_that("sample cashbval_usage_detail file reads and parses correctly", {
expect_equal(
system.file("extdata", "cashbval_usage_detail_30358785_201811", package = "bbanalyze") %>%
parse_detail() %>%
nrow(),
0,
failure_message = "parse_detail() should ignore cashbval files and return empty data frame for now"
)
})
devtools::check(document = T)
devtools::check(document = T)
devtools::check(document = T)
devtools::check(document = T)
devtools::check(document = T)
devtools::check(document = T)
devtools::check(document = T)
rm(list = ls())
dir_vr = system.file("extdata", package = "bbanalyze")
system.file("extdata", package = "bbanalyze")
dir_vr <- system.file("extdata", package = "bbanalyze")
target_account <- 30225811
target_month <- 201811
### get all VR files associated with this target month and account
dir(dir_vr)
?which
paste0(target_account,target_month,sep ="_")
paste0(target_account,target_month,collapse ="_")
paste(target_account,target_month,collapse ="_")
paste(target_account,target_month,sep ="_")
### get all VR files associated with this target month and account
grepl(paste(target_account,target_month,sep ="_"),dir(dir_vr))
?grep
### get all VR files associated with this target month and account
grep(paste(target_account,target_month,sep ="_"),dir(dir_vr))
### get all VR files associated with this target month and account
grep(paste(target_account,target_month,sep ="_"),dir(dir_vr), value = T)
### get all VR files associated with this target month and account
files = grep(paste(target_account,target_month,sep ="_"),dir(dir_vr), value = T)
usage_detail = data.frame()
devtools::check(document = T)
warnings()
devtools::check(document = T)
devtools::document()
devtools::document()
devtools::document()
devtools::check(document = T)
devtools::load_all(".")
dir_vr <- system.file("extdata", package = "bbanalyze")
target_account <- 30225811
target_month <- 201811
filepath <- system.file("extdata", "cashbval_usage_detail_30358785_201811", package = "bbanalyze")
filepath <- system.file("extdata", "cashbval_usage_detail_30358785_201811", package = "bbanalyze")
filepath <- system.file("extdata", "cashbval_usage_detail_30358785_201811", package = "bbanalyze")
test_that("sample cashbval_usage_detail file reads and parses correctly", {
expect_equal(
filepath %>%
parse_detail() %>%
nrow(),
0,
failure_message = "parse_detail() should ignore cashbval files and return empty data frame for now"
)
})
dir_vr <- system.file("extdata", package = "bbanalyze")
target_account <- 30225811
target_month <- 201811
conn = "placeholder"
parse_all_vr(conn,dir_vr,target_account,target_month)
parse_all_vr(conn,dir_vr,target_account,target_month) %>% nrow()
parse_all_vr(conn,dir_vr,30358785,target_month) %>% nrow()
# rm(list = ls())
# filepath <- system.file("extdata", "usage_detail_30225811_201811", package = "bbanalyze")
# this_usage = system.file("extdata", "usage_detail_30225811_201811", package = "bbanalyze") %>% parse_detail()
test_that("sample usage_detail file reads and parses correctly", {
expect_equal(
system.file("extdata", "usage_detail_30225811_201811", package = "bbanalyze") %>%
parse_detail() %>%
names(),
c(
"OUTPUT_ID",
"SECURITY",
"ID_BB_UNIQUE",
"QUALIFIER",
"PROCESSED_TIME",
"DOWNLOAD_PRODUCT",
"BILLABLE_PRODUCT",
"SERVICE",
"CTRB_BILLING",
"CTRB_UNIQ",
"CTRB_AC",
"CTRB_MAIN",
"INIT_CHARGE",
"CTRB_PD",
"CAPS",
"BO_OPTIMIZED",
"tz",
"PRODUCT_TYPE",
"CTRB_BAC"
),
failure_message = "column names not matching expected"
)
expect_equal(
system.file("extdata", "usage_detail_30225811_201811", package = "bbanalyze") %>%
parse_detail() %>%
nrow(),
3608,
failure_message = "number of rows not as expected"
)
})
### ----------------------------------------------------------------------------
# this_usage = system.file("extdata", "scheduled_securities_30358785_201811", package = "bbanalyze") %>% parse_detail()
test_that("sample scheduled_securities file reads and parses correctly", {
expect(
all(system.file("extdata", "scheduled_securities_30358785_201811", package = "bbanalyze") %>%
parse_detail() %>%
names() %in%
c(
"OUTPUT_ID",
"SECURITY",
"ID_BB_UNIQUE",
"QUALIFIER",
"PROCESSED_TIME",
"DOWNLOAD_PRODUCT",
"BILLABLE_PRODUCT",
"SERVICE",
"CTRB_BILLING",
"CTRB_UNIQ",
"CTRB_AC",
"CTRB_MAIN",
"INIT_CHARGE",
"CTRB_PD",
"CAPS",
"BO_OPTIMIZED",
"tz",
"PRODUCT_TYPE",
"CTRB_BAC"
)),
failure_message = "column names not matching expected"
)
expect(
all(
(
system.file("extdata", "scheduled_securities_30358785_201811", package = "bbanalyze") %>%
parse_detail() %>%
names()
) %in%
(
system.file("extdata", "usage_detail_30225811_201811", package = "bbanalyze") %>%
parse_detail() %>%
names()
)
),
failure_message = "column names for scheduled securities not fully contained in the superset of usage_detail"
)
expect_equal(
system.file("extdata", "scheduled_securities_30358785_201811", package = "bbanalyze") %>%
parse_detail() %>%
nrow(),
11801,
failure_message = "number of rows not as expected"
)
})
### ----------------------------------------------------------------------------
filepath <- system.file("extdata", "cashbval_usage_detail_30358785_201811", package = "bbanalyze")
# filepath %>% parse_detail()
test_that("sample cashbval_usage_detail file reads and parses correctly", {
expect_equal(
filepath %>%
parse_detail() %>%
nrow(),
0,
failure_message = "parse_detail() should ignore cashbval files and return empty data frame for now"
)
})
### ----------------------------------------------------------------------------
conn = "placeholder"
dir_vr <- system.file("extdata", package = "bbanalyze")
target_account <- 30225811
target_month <- 201811
test_that("parse_all_vr is looping through the files", {
expect_equal(
parse_all_vr(conn,dir_vr,target_account,target_month) %>% nrow(),
3608,
failure_message = "parse_all_vr() should not getting correct row count"
)
expect_equal(
parse_all_vr(conn,dir_vr,30358785,target_month) %>% nrow(),
11801,
failure_message = "parse_all_vr() should not getting correct row count"
)
})
filepath <- system.file("extdata", "usage_detail_30225811_201811", package = "bbanalyze")
test_that("sample usage_detail file reads and parses correctly", {
expect_equal(
filepath %>%
parse_detail() %>%
names(),
c(
"OUTPUT_ID",
"SECURITY",
"ID_BB_UNIQUE",
"QUALIFIER",
"PROCESSED_TIME",
"DOWNLOAD_PRODUCT",
"BILLABLE_PRODUCT",
"SERVICE",
"CTRB_BILLING",
"CTRB_UNIQ",
"CTRB_AC",
"CTRB_MAIN",
"INIT_CHARGE",
"CTRB_PD",
"CAPS",
"BO_OPTIMIZED",
"tz",
"PRODUCT_TYPE",
"CTRB_BAC"
),
failure_message = "column names not matching expected"
)
expect_equal(
system.file("extdata", "usage_detail_30225811_201811", package = "bbanalyze") %>%
parse_detail() %>%
nrow(),
3608,
failure_message = "number of rows not as expected"
)
})
this_usage = system.file("extdata", "usage_detail_30225811_201811", package = "bbanalyze") %>% parse_detail()
### find all output files that occur over multiple days and cluster them into 60 second groups
outs = aggregate(this_usage$PROCESSED_TIME,
by = list(OUTPUT_ID = this_usage$OUTPUT_ID),
FUN = function(x) {difftime(range(x)[2], range(x)[1], units = "hours")})
View(outs)
outs = outs[outs$x > 0,]
data = data.frame()
cluster = F
if(nrow(outs) > 0) {
i = 1
if(cluster == F) {
for(i in 1:nrow(outs)) {
single_output = this_usage[this_usage$OUTPUT_ID == outs[i,"OUTPUT_ID"],]
# plot(single_output$PROCESSED_TIME)
print(outs[i,"OUTPUT_ID"])
print(length(single_output$PROCESSED_TIME))
### no more fancy h-cluster :(
# # Ward Hierarchical Clustering
# d <- dist(single_output$PROCESSED_TIME, method = "euclidean") # distance matrix
# fit <- hclust(d, method="ward")
# # plot(fit) # display dendogram
# groups <- cutree(fit, h = 10) # cut tree at 10 second mark
# # draw dendogram with red borders around the 5 clusters
# # rect.hclust(fit, k=5, border="red")
groups = single_output$PROCESSED_TIME
print(table(groups))
print(paste0(i," of ",nrow(outs)))
single_output$OUTPUT_ID_cluster = paste0(single_output$OUTPUT_ID," (", groups,")")
data = plyr::rbind.fill(data,single_output)
}
}
### incomplete, F cluster option just using unique PROCESSED TIMES
if(cluster == T) {
for(i in 1:nrow(outs)) {
single_output = this_usage[this_usage$OUTPUT_ID == outs[i,"OUTPUT_ID"],]
# plot(single_output$PROCESSED_TIME)
print(outs[i,"OUTPUT_ID"])
print(length(single_output$PROCESSED_TIME))
print(length(unique(single_output$PROCESSED_TIME)))
### build groups just by unique times
single_reqs = split(single_output,single_output$PROCESSED_TIME)
for (j in 1:length(single_reqs)) {
single_reqs[[j]]$OUTPUT_ID_cluster = paste0(single_reqs[[j]]$OUTPUT_ID," (", j,")")
}
gc()
single_output = unsplit(single_reqs, single_output$PROCESSED_TIME, drop = FALSE)
data = plyr::rbind.fill(data,single_output)
print(table(single_output$OUTPUT_ID_cluster))
print(paste0(i," of ",nrow(outs)))
}
}
}
### add back all the non-repeating outs
outs = aggregate(this_usage$PROCESSED_TIME,
by = list(OUTPUT_ID = this_usage$OUTPUT_ID),
FUN = function(x) {difftime(range(x)[2], range(x)[1], units = "hours")})
outs = outs[outs$x == 0,]
### find all output files that occur over multiple days and cluster them into 60 second groups
outs = aggregate(this_usage$PROCESSED_TIME,
by = list(OUTPUT_ID = this_usage$OUTPUT_ID),
FUN = function(x) {difftime(range(x)[2], range(x)[1], units = "hours")})
outs = outs[outs$x > 0,]
data = data.frame()
if(nrow(outs) > 0) {
i = 1
if(cluster == F) {
for(i in 1:nrow(outs)) {
single_output = this_usage[this_usage$OUTPUT_ID == outs[i,"OUTPUT_ID"],]
# plot(single_output$PROCESSED_TIME)
print(outs[i,"OUTPUT_ID"])
print(length(single_output$PROCESSED_TIME))
### no more fancy h-cluster :(
# # Ward Hierarchical Clustering
# d <- dist(single_output$PROCESSED_TIME, method = "euclidean") # distance matrix
# fit <- hclust(d, method="ward")
# # plot(fit) # display dendogram
# groups <- cutree(fit, h = 10) # cut tree at 10 second mark
# # draw dendogram with red borders around the 5 clusters
# # rect.hclust(fit, k=5, border="red")
groups = single_output$PROCESSED_TIME
print(table(groups))
print(paste0(i," of ",nrow(outs)))
single_output$OUTPUT_ID_cluster = paste0(single_output$OUTPUT_ID," (", groups,")")
data = plyr::rbind.fill(data,single_output)
}
}
### incomplete, F cluster option just using unique PROCESSED TIMES
if(cluster == T) {
for(i in 1:nrow(outs)) {
single_output = this_usage[this_usage$OUTPUT_ID == outs[i,"OUTPUT_ID"],]
# plot(single_output$PROCESSED_TIME)
print(outs[i,"OUTPUT_ID"])
print(length(single_output$PROCESSED_TIME))
print(length(unique(single_output$PROCESSED_TIME)))
### build groups just by unique times
single_reqs = split(single_output,single_output$PROCESSED_TIME)
for (j in 1:length(single_reqs)) {
single_reqs[[j]]$OUTPUT_ID_cluster = paste0(single_reqs[[j]]$OUTPUT_ID," (", j,")")
}
gc()
single_output = unsplit(single_reqs, single_output$PROCESSED_TIME, drop = FALSE)
data = plyr::rbind.fill(data,single_output)
print(table(single_output$OUTPUT_ID_cluster))
print(paste0(i," of ",nrow(outs)))
}
}
}
### add back all the non-repeating outs
outs = aggregate(this_usage$PROCESSED_TIME,
by = list(OUTPUT_ID = this_usage$OUTPUT_ID),
FUN = function(x) {difftime(range(x)[2], range(x)[1], units = "hours")})
outs = outs[outs$x == 0,]
